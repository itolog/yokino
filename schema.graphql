# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CommentsDto {
    authorId: String!
    created: DateTime!
    id: String!
    movieId: String!
    text: String!
}

type CommonType {
    current_page: Int!
    first_page_url: String!
    from: Int!
    last_page: Int!
    last_page_url: String
    next_page_url: String
    path: String!
    per_page: Int!
    prev_page_url: String
    result: Boolean
    to: Int!
    total: Int!
    total_count: Int!
}

type Genres {
    id: Int
    name: String
}

type GetMovie {
    add: String
    episodes: Int
    episodes_count: Int
    id: Float!
    iframe_src: String
    imdb_id: String
    kp_id: String
    media_info: MediaInfo
    orig_title: String
    seasons_count: Int
    title: String
    type: String
    update: String
    year: String
}

type IdAuthor {
    id: String!
}

type IdComments {
    id: String!
}

type IdMovie {
    id: String!
}

type IdUser {
    id: String!
}

type ListShort {
    data: [Short!]
}

type Media {
    accepted: String
    created: String
    duration: Int
    max_quality: Int
    source_quality: String
}

type MediaInfo {
    backdrop_path: String
    countries: [String!]
    description: String
    genres: [Genres!]
    id: Int
    poster_url: String
    rating: Float
    title: String
    title_en: String
    year: Int
}

type Movie {
    blocked: Float
    created: String
    id: Float
    iframe: String
    iframe_src: String
    imdb_id: String
    kinopoisk_id: String
    media: [Media!]
    orig_title: String
    poster: String
    preview_iframe_src: String
    released: String
    ru_title: String
    updated: String
    year: String
}

type Movies {
    current_page: Int!
    data: [Movie!]
    first_page_url: String!
    from: Int!
    last_page: Int!
    last_page_url: String
    next_page_url: String
    path: String!
    per_page: Int!
    prev_page_url: String
    result: Boolean
    to: Int!
    total: Int!
    total_count: Int!
}

type Mutation {
    createComments(data: CommentsInput!): CommentsDto!
    createUser(data: UserInput!): UsersDto!
    deleteAuthorComments(id: String!): IdAuthor!
    deleteComment(id: String!): IdComments!
    deleteMovieComments(id: String!): IdMovie!
    deleteUser(id: String!): IdUser!
}

type NowPlaying {
    backdrop_path: String
    id: Float
    original_title: String
    poster_path: String
}

type Query {
    finfUser(name: String!): UsersDto!
    getAllUsers: [UsersDto!]!
    getMovie(id: String!): GetMovie!
    getMovieComments(movieId: String!): [CommentsDto!]!
    getMoviesUpdates(page: String!, year: String!): Movies!
    getSerialsUpdates(page: String!, year: String!): Serials!
    getTvShowsUpdates(page: String!, year: String!): Serials!
    listForCarousel(page: String!, year: String!): ListShort!
    login(pass: String!, username: String!): UserLoginDto!
    nowPlaying: [NowPlaying!]!
    searchMedia(title: String!): Search!
}

type Search {
    movies: [Movie!]
    serials: [Serial!]
}

type Serial {
    blocked: Float
    created: String
    episode_count: Int
    id: Float!
    iframe: String!
    iframe_src: String!
    imdb_id: String
    kinopoisk_id: String
    last_episode_id: Int
    orig_title: String
    poster: String
    preview_iframe_src: String!
    ru_title: String
    season_count: Int
    start_date: String
    updated: String
}

type Serials {
    current_page: Int!
    data: [Serial!]
    first_page_url: String!
    from: Int!
    last_page: Int!
    last_page_url: String
    next_page_url: String
    path: String!
    per_page: Int!
    prev_page_url: String
    result: Boolean
    to: Int!
    total: Int!
    total_count: Int!
}

type Short {
    id: Float
    kp_id: String
    poster: String
    title: String
}

type UserLoginDto {
    access_token: String!
    banned: Boolean
    email: String
    id: String!
    name: String
    password: String
    role: String
}

type UsersDto {
    banned: Boolean
    email: String
    id: String!
    name: String
    password: String
    role: String
}

input CommentsInput {
    authorId: String!
    movieId: String!
    text: String!
}

input UserInput {
    email: String!
    name: String!
    password: String!
    role: String
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
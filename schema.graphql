# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type MaterialData {
    actors: [String!]
    countries: [String!]
    description: String
    directors: [String!]
    duration: String
    genres: [String!]
    imdb_rating: String
    imdb_votes: String
    kinopoisk_rating: String
    kinopoisk_votes: String
    poster_url: String
    premiere_world: String
    producers: [String!]
    tagline: String
    title: String
    title_en: String
    year: Int
}

type Movie {
    blocked_countries: [String!]
    camrip: Boolean
    created_at: String
    id: String
    imdb_id: String
    kinopoisk_id: String
    link: String
    material_data: MaterialData
    quality: String
    title: String
    title_orig: String
    translation: Translation
    updated_at: String
    year: Int
}

type Movies {
    next_page: String
    prev_page: String
    results: [Movie!]
    total: Int
}

type Mutation {
    createUser(data: UserInput!): UsersDto!
    deleteUser(id: String!): UsersDto!
}

type Query {
    finfUser(name: String!): UsersDto!
    getAllUsers: [UsersDto!]!
    getMovie(id: String!): Movie!
    getMoviesUpdates(camrip: Boolean!, genres: String!, next: String!, type: String!, year: String!): Movies!
    getSerialsUpdates(genres: String!, next: String!, year: String!): Serials!
    listForCarousel: [Serial!]!
    listForSerialsUpdate: [Serial!]!
    login(pass: String!, username: String!): UserLoginDto!
    searchMovie(title: String!): [Movie!]!
    translations: [Translations!]!
}

type Serial {
    blocked_countries: [String!]
    camrip: Boolean
    created_at: String
    episodes_count: Int
    id: String
    imdb_id: String
    kinopoisk_id: String
    last_episode: Int
    last_season: Int
    link: String
    material_data: MaterialData
    quality: String
    title: String
    title_orig: String
    translation: Translation
    updated_at: String
    year: Int
}

type Serials {
    next_page: String
    prev_page: String
    results: [Serial!]
    total: Int
}

type Translation {
    id: Int
    title: String
}

type Translations {
    id: Int
    title: String
}

type UserLoginDto {
    access_token: String!
    banned: Boolean
    email: String
    id: String!
    name: String
    password: String
    role: String
}

type UsersDto {
    banned: Boolean
    email: String
    id: String!
    name: String
    password: String
    role: String
}

input UserInput {
    email: String!
    name: String!
    password: String!
    role: String
}
